/* cppast_config.h. Generated by CMake for @PROJECT_NAME@. */

// Ensure the compiler is meeting the minimum C++ standard
// MSVC is not checked via __cplusplus due to
// https://developercommunity.visualstudio.com/content/problem/120156/-cplusplus-macro-still-defined-as-pre-c11-value.html
#if (!defined(_MSC_VER) && __cplusplus < 201402L) || (defined(_MSC_VER) && _MSC_VER < 1900)
  #error CPPAST requires C++14 or above
#endif

// #define BUILD_@CMAKE_BUILD_TYPE@
/* cppast version information */
#define CPPAST_MAJOR_VERSION ${cppast_VERSION_MAJOR}
#define CPPAST_MINOR_VERSION ${cppast_VERSION_MINOR}
#define CPPAST_REVISION_VERSION ${cppast_VERSION_PATCH}
#define CPPAST_VERSION_STRING "${cppast_VERSION}"
#define CPPAST_VERSION_CALC(MAJ, MIN, PATCH) (MAJ*100000+MIN*100+PATCH)
#define CPPAST_VERSION \
        CPPAST_VERSION_CALC(CPPAST_MAJOR_VERSION, CPPAST_MINOR_VERSION, CPPAST_REVISION_VERSION)

// ON(1)/OFF(0)
#define ON 1
#define OFF 0

#define TYPE_SAFE_ENABLE_ASSERTIONS @TYPE_SAFE_ENABLE_ASSERTIONS@
#define TYPE_SAFE_ENABLE_PRECONDITION_CHECKS @TYPE_SAFE_ENABLE_PRECONDITION_CHECKS@
#define TYPE_SAFE_ENABLE_WRAPPER @TYPE_SAFE_ENABLE_WRAPPER@
#define TYPE_SAFE_ARITHMETIC_UB @TYPE_SAFE_ARITHMETIC_UB@

#define CPPAST_CLANG_BINARY "${CLANG_BINARY}"
#define CPPAST_CLANG_VERSION_STRING "${LLVM_VERSION}"
// #define CMAKE_INTDIR @CMAKE_BUILD_TYPE@

// #cmakedefine HAVE_CXXOPTS 1

#cmakedefine HAVE_TINY-PROCESS-LIBRARY 1

#cmakedefine HAVE_TYPE_SAFE 1

